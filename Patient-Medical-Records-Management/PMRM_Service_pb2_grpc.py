# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import PMRM_Service_pb2 as PMRM__Service__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in PMRM_Service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MedicalRecordServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateRecord = channel.unary_unary(
                '/MedicalRecordService/CreateRecord',
                request_serializer=PMRM__Service__pb2.CreateRecordRequest.SerializeToString,
                response_deserializer=PMRM__Service__pb2.CreateRecordResponse.FromString,
                _registered_method=True)
        self.RetrieveRecord = channel.unary_unary(
                '/MedicalRecordService/RetrieveRecord',
                request_serializer=PMRM__Service__pb2.RetrieveRecordRequest.SerializeToString,
                response_deserializer=PMRM__Service__pb2.RetrieveRecordResponse.FromString,
                _registered_method=True)
        self.UpdateRecord = channel.unary_unary(
                '/MedicalRecordService/UpdateRecord',
                request_serializer=PMRM__Service__pb2.UpdateRecordRequest.SerializeToString,
                response_deserializer=PMRM__Service__pb2.UpdateRecordResponse.FromString,
                _registered_method=True)
        self.DeleteRecord = channel.unary_unary(
                '/MedicalRecordService/DeleteRecord',
                request_serializer=PMRM__Service__pb2.DeleteRecordRequest.SerializeToString,
                response_deserializer=PMRM__Service__pb2.DeleteRecordResponse.FromString,
                _registered_method=True)


class MedicalRecordServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MedicalRecordServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRecord,
                    request_deserializer=PMRM__Service__pb2.CreateRecordRequest.FromString,
                    response_serializer=PMRM__Service__pb2.CreateRecordResponse.SerializeToString,
            ),
            'RetrieveRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveRecord,
                    request_deserializer=PMRM__Service__pb2.RetrieveRecordRequest.FromString,
                    response_serializer=PMRM__Service__pb2.RetrieveRecordResponse.SerializeToString,
            ),
            'UpdateRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRecord,
                    request_deserializer=PMRM__Service__pb2.UpdateRecordRequest.FromString,
                    response_serializer=PMRM__Service__pb2.UpdateRecordResponse.SerializeToString,
            ),
            'DeleteRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRecord,
                    request_deserializer=PMRM__Service__pb2.DeleteRecordRequest.FromString,
                    response_serializer=PMRM__Service__pb2.DeleteRecordResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MedicalRecordService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('MedicalRecordService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MedicalRecordService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MedicalRecordService/CreateRecord',
            PMRM__Service__pb2.CreateRecordRequest.SerializeToString,
            PMRM__Service__pb2.CreateRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RetrieveRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MedicalRecordService/RetrieveRecord',
            PMRM__Service__pb2.RetrieveRecordRequest.SerializeToString,
            PMRM__Service__pb2.RetrieveRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MedicalRecordService/UpdateRecord',
            PMRM__Service__pb2.UpdateRecordRequest.SerializeToString,
            PMRM__Service__pb2.UpdateRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MedicalRecordService/DeleteRecord',
            PMRM__Service__pb2.DeleteRecordRequest.SerializeToString,
            PMRM__Service__pb2.DeleteRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
